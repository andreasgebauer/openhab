# dieser wert ist die msgCount wo man 250 subtrahieren muss 
# 21 * 3 bit für die speicherung
# = 63 bit = 8 Byte
# letzte spalte besagt:
# mögliche worte:
# 334 -> 2, 3334 -> 3, 33334 -> 4 (konstant und global gültig)
# 1x2, 2x3 -> 2, 3x3 -> 3, 4x3 ->4, 1x4 ->5
# 5 bit * 11 = 55 bit = 7 byte
# 1x2, 2x3, 1x2, 4x3, 1x2, 3x3, 1x2, 4x3, 1x2, 4x3, 
# muster: .. , 1x2, .., 1x2, .., 1x2
# 2, 4, 3, 4, 4
# offset: 1 bit
# startWithPattern: 1bit
# 4 bit * 5 = 20 bit
# + 1 bit offset 
# + 1 bit startWithPattern
# = 22 bit 
# = 3 byte + 1 byte startseed

# ARR2={3,3,4}, ARR3={3,3,3,4}, ARR4={3,3,3,3,4}
# arr;
# if(startWithPattern){
# 	arr.add(ARR2);
# }
# while(hasEl){
# 	arr.add(el);
#	arr.add(ARR2);
# }
# 
# arrIndex=0
# arrIndexIndex=0
# cnt = 0
# while(cnt < msgCnt){
#	arr.get(arrIndex);
#	arrIndexIndex++;
#	
#	cnt++;
# }

# startseed = 120000 + (250 * _11_) (0x0B)
startSeed=122750
# offset=-1
# startWithPattern=1
2	3	1x2
5	3
9	4
12	3	2x3
15	3
18	3
22	4
25	3
28	3	
31	3
35	4
38	3	1x2
41	3
45	4
48	3	4x3
51	3
54	3
58	4
61	3
64	3
67	3
71	4
74	3
77	3
80	3
84	4
87	3
90	3
93	3
97	4
100	3	1x2
103	3
107	4
110	3	3x3
113	3
116	3
120	4
123	3
126	3
129	3
133	4
136	3
139	3
142	3
146	4
149	3	1x2
152	3
156	4
159	3	4x3
162	3
165	3
169	4
172	3
175	3
178	3
182	4
185	3
188	3
191	3
195	4
198	3
201	3
204	3
208	4
211	3	1x2
214	3
218	4	
221	3	4x3
224	3
227	3
231	4
234	3
237	3
240	3
244	4
247	3
250	3
253	3
